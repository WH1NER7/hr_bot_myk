import asyncio
import os

from aiogram import Bot, Dispatcher, F, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
import database

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
API_TOKEN = os.getenv("BOT_TOKEN")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN, parse_mode='HTML')
dp = Dispatcher()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class TestStates(StatesGroup):
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    Q6 = State()
    TestQ1 = State()
    TestQ2 = State()
    TestQ3 = State()
    TestQ4 = State()
    TestQ5 = State()
    TestEnd = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}

# Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
start_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–û –±—Ä–µ–Ω–¥–µ", callback_data="about_brand")]
    ]
)

about_brand_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="job_conditions")]
    ]
)

job_conditions_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã", callback_data="job_conditions_2")]
    ]
)

job_conditions_2_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test")]
    ]
)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
correct_answers = {
    '1': '1',
    '2': '2',
    '3': '1',
    '4': '3',
    '5': '3'
}


# –•–µ–Ω–¥–ª–µ—Ä –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start
@dp.message(Command('start'))
async def send_welcome(message: types.Message):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! üëã\n\n–ú—ã –æ—Ç–∫—Ä—ã–≤–∞–µ–º –≤–∞–∫–∞–Ω—Å–∏—é –Ω–∞ –¥–æ–ª–∂–Ω–æ—Å—Ç—å <b>–º–µ–Ω–µ–¥–∂–µ—Ä–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–æ–≤</b> –≤ –∫–æ–º–∞–Ω–¥—É –±—Ä–µ–Ω–¥–∞ <b>\"MissYourKiss\"</b>.\n\n"
        "–ú—ã –∫–æ—Ä–æ—Ç–∫–æ —Ä–∞—Å—Å–∫–∞–∂–µ–º –æ –∫–æ–º–ø–∞–Ω–∏–∏ –∏ –ø—Ä–µ–¥–ª–æ–∂–∏–º –Ω–∞—à–∏ —É—Å–ª–æ–≤–∏—è –ø–æ –≤–∞–∫–∞–Ω—Å–∏–∏.\n"
        "–í –∫–æ–Ω—Ü–µ –º—ã –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∏ –∫–æ—Ä–æ—Ç–∫–∏–π —Ç–µ—Å—Ç, —á—Ç–æ–±—ã –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à–∏ –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏–∏.\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –æ –±—Ä–µ–Ω–¥–µ üëá",
        reply_markup=start_inline_keyboard
    )


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –±—Ä–µ–Ω–¥–µ"
@dp.callback_query(F.data == "about_brand")
async def about_brand(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üåü MissYourKiss - —Å–∏–º–≤–æ–ª –∂–µ–Ω—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –≤ –º–∏—Ä–µ –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è.\n"
        "–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å:\n\n"
        "‚Äî –ú—ã –Ω–∞ —Ä—ã–Ω–∫–µ —É–∂–µ 5 –ª–µ—Ç!\n"
        "‚Äî –û–±–æ—Ä–æ—Ç –Ω–∞—à–µ–π –∫–æ–º–ø–∞–Ω–∏–∏ –æ—Ç 70 –º–ª–Ω —Ä—É–± –≤ –º–µ—Å—è—Ü,\n"
        "‚Äî –ú—ã –¢–û–ü-1 –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è –Ω–∞ WB\n"
        "‚Äî –í –∏—é–Ω–µ 2024 –≥–æ–¥–∞ –ú–∏—Å—Ç–µ–ª–ª–∞ –ø–æ–ª—É—á–∏–ª–∞ —Å—Ç–∞—Ç—É—Å —Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –°–∫–æ–ª–∫–æ–≤–æ!\n"
        "‚Äî –ù–∞—à–µ –±–µ–ª—å–µ –∑–Ω–∞—é—Ç –∏ –ª—é–±—è—Ç –º–Ω–æ–≥–∏–µ, –≤–µ–¥—å –º—ã –∑–∞–¥–∞–µ–º —Ç—Ä–µ–Ω–¥—ã –∏ –¥–∞—Ä–∏–º –Ω–µ–ø–æ–≤—Ç–æ—Ä–∏–º—ã–µ —ç–º–æ—Ü–∏–∏ (55.000 –∑–∞–∫–∞–∑–æ–≤ –≤ –º–µ—Å—è—Ü)",
        reply_markup=about_brand_keyboard
    )
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å–ª–æ–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"
@dp.callback_query(F.data == "job_conditions")
async def job_conditions(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üåê –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Ozon –∏ WB, –≤–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å:\n\n"
        "‚Äì –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–ª–∞–Ω–æ–≤—ã—Ö –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ –ø–æ –æ—Å–Ω–æ–≤–Ω—ã–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º (–æ–±—ä–µ–º –∑–∞–∫–∞–∑–æ–≤, –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –î–†–†)\n"
        "‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö\n"
        "‚Äì –£—á–∞—Å—Ç–∏–µ –≤ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤—ã—Ö SKU\n"
        "‚Äì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑ –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞",
        reply_markup=job_conditions_keyboard
    )
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã"
@dp.callback_query(F.data == "job_conditions_2")
async def job_conditions_2(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n\n"
        "‚Äî –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: 100 000 –¥–æ –≤—ã—á–µ—Ç–∞ –ù–î–§–õ –Ω–∞ –ø–µ—Ä–∏–æ–¥ –∏—Å–ø—ã—Ç–∞—Ç–µ–ª—å–Ω–æ–≥–æ —Å—Ä–æ–∫–∞, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è + kpi\n"
        "‚Äî –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 5/2 —Å 09:00 –¥–æ 18:00 —É–¥–∞–ª–µ–Ω–Ω–æ\n"
        "‚Äî –°–≤–æ–±–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏–π: —Ç—ã —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—à—å, –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n"
        "‚Äî –ß–µ—Ç–∫–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\n"
        "‚Äî –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –∫–æ–ª–ª–µ–≥–∏: –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–º —Ç–≤–æ–∏ –∏–¥–µ–∏\n"
        "‚Äî –ö–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –æ–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏\n"
        "‚Äî –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –¢–ö –†–§\n"
        "‚Äî –ü—Ä–µ–º–∏–∏ –∏ –±–æ–Ω—É—Å—ã –∑–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Ä–æ—Å—Ç –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π!",
        reply_markup=job_conditions_2_keyboard
    )
    await callback_query.answer()


@dp.callback_query(F.data == "start_test")
async def start_test(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if database.user_exists(user_id):
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text="–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –°–ø–∞—Å–∏–±–æ!"
        )
    else:
        await bot.send_message(
            chat_id=callback_query.from_user.id,
            text=(
                "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
                "*–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –ø—Ä—è–º–æ –≤ –±–æ—Ç–∞!*\n\n"
                "1. –í–∞—à–µ –∏–º—è?"
            )
        )
        await state.set_state(TestStates.Q1)
    await callback_query.answer()



# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ
@dp.message(TestStates.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer1 = message.text
    await state.update_data(name=answer1)
    await message.answer("2. –° –∫–∞–∫–∏–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–ª? –ö–∞–∫ –¥–∞–≤–Ω–æ?")
    await state.set_state(TestStates.Q2)


@dp.message(TestStates.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
    answer2 = message.text
    await state.update_data(marketplaces=answer2)
    await message.answer("3. –ö–∞–∫–æ–π —É —Ç–µ–±—è –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ –º–µ—Å—è—Ü?")
    await state.set_state(TestStates.Q3)


@dp.message(TestStates.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
    answer3 = message.text
    await state.update_data(budget=answer3)
    await message.answer("4. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö! –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ")
    await state.set_state(TestStates.Q4)


@dp.message(TestStates.Q4)
async def answer_q4(message: types.Message, state: FSMContext):
    answer4 = message.text
    await state.update_data(achievements=answer4)
    await message.answer("5. –ï—Å—Ç—å –ª–∏ —Ç–µ–∫—É—â–∏–µ –ø—Ä–æ–µ–∫—Ç—ã? –ï—Å–ª–∏ –µ—Å—Ç—å, —Ç–æ –∫–∞–∫–∏–µ?")
    await state.set_state(TestStates.Q5)


@dp.message(TestStates.Q5)
async def answer_q5(message: types.Message, state: FSMContext):
    answer5 = message.text
    await state.update_data(current_projects=answer5)
    await message.answer("6. –° –∫–∞–∫–∏–º–∏ –æ–±–æ—Ä–æ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–ª –≤ –º–µ—Å—è—Ü?")
    await state.set_state(TestStates.Q6)


@dp.message(TestStates.Q6)
async def answer_q6(message: types.Message, state: FSMContext):
    answer6 = message.text
    await state.update_data(monthly_turnover=answer6)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –ø–æ –±–∞–∑–æ–≤—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö! –û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å üîç"
    )
    await asyncio.sleep(2)
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    await send_test_question1(message, state)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
# –í–æ–ø—Ä–æ—Å 1
async def send_test_question1(message: types.Message, state: FSMContext):
    question = "1. –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–¥–¥–µ—Ä?\n\
1Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫\n\
2Ô∏è‚É£ –ß–µ–ª–æ–≤–µ–∫, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—â–∏–π —Ä–µ–∫–ª–∞–º—É\n\
3Ô∏è‚É£ –ú–µ—Ç—Ä–∏–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã WB"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q1_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q1_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q1_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.answer(question, reply_markup=keyboard)
    await state.set_state(TestStates.TestQ1)


@dp.callback_query(TestStates.TestQ1)
async def answer_test_q1(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q1'] = user_choice
    await callback_query.answer()
    await send_test_question2(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 2
async def send_test_question2(message: types.Message, state: FSMContext):
    question = "2. –ö–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–∫–ª–∞–º—ã –≥–æ–≤–æ—Ä—è—Ç –æ –µ—ë —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n\
1Ô∏è‚É£ CTR 6%, –î–†–† 23%, CPC 61‚ÇΩ\n\
2Ô∏è CTR 13%, –î–†–† 3%, CPC 7‚ÇΩ\n\
3Ô∏è‚É£ CTR 16%, –î–†–† 10%, CPC 186‚ÇΩ"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q2_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q2_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q2_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options], )
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(TestStates.TestQ2)


@dp.callback_query(TestStates.TestQ2)
async def answer_test_q2(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q2'] = user_choice
    await callback_query.answer()
    await send_test_question3(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 3
async def send_test_question3(message: types.Message, state: FSMContext):
    question = "3. –ö–∞–∫–∏–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –æ—Ç–ª–∏—á–∏—è —É –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã –≤ –∫–∞—Ä—Ç–æ—á–∫–µ —Ç–æ–≤–∞—Ä–∞?\n\
1Ô∏è‚É£ –ù–µ–ª—å–∑—è –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã\n\
2Ô∏è‚É£ –í–∏–¥–Ω–æ —Ä–µ–π—Ç–∏–Ω–≥ —Ç–æ–≤–∞—Ä–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ—Ç–∑—ã–≤–æ–≤\n\
3Ô∏è‚É£ –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã –ø–æ–∫–∞–∑–æ–≤"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q3_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q3_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q3_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(TestStates.TestQ3)


@dp.callback_query(TestStates.TestQ3)
async def answer_test_q3(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q3'] = user_choice
    await callback_query.answer()
    await send_test_question4(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 4
async def send_test_question4(message: types.Message, state: FSMContext):
    question = "4. –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º—ã?\n\
1Ô∏è‚É£ –ö–æ–Ω—Ç–µ–Ω—Ç, —Å—Ç–∞–≤–∫–∏\n\
2Ô∏è‚É£ –°—Ç–∞–≤–∫–∏, —Ü–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è\n\
3Ô∏è‚É£ –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q4_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q4_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q4_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(TestStates.TestQ4)


@dp.callback_query(TestStates.TestQ4)
async def answer_test_q4(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q4'] = user_choice
    await callback_query.answer()
    await send_test_question5(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 5
async def send_test_question5(message: types.Message, state: FSMContext):
    question = "5. –ö–∞–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞?\n\
1Ô∏è‚É£ CTR\n\
2Ô∏è‚É£ CPC\n\
3Ô∏è‚É£ CPO\n\
4Ô∏è‚É£ ROI"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q5_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q5_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q5_3"),
        InlineKeyboardButton(text="4Ô∏è‚É£", callback_data="q5_4")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(TestStates.TestQ5)


@dp.callback_query(TestStates.TestQ5)
async def answer_test_q5(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q5'] = user_choice
    await callback_query.answer()
    await finish_test(callback_query.message, state)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def finish_test(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    score = 0
    for i in range(1, 6):
        if user_data.get(f'q{i}') == correct_answers[str(i)]:
            score += 1
    result_text = f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ 5 –±–∞–ª–ª–æ–≤.\n\n\
üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –±—Ä–µ–Ω–¥—É!\n\
–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n\
–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞—à–µ–º—É HR!\n\
\n\
–ö–æ–Ω—Ç–∞–∫—Ç: @julietteHR"
    await message.edit_text(result_text)
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    data['test_score'] = score
    data['user_id'] = message.chat.id
    data['username'] = message.chat.username
    data['first_name'] = message.chat.first_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.save_user_data(data)
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()


if __name__ == '__main__':
    asyncio.run(main())
