import asyncio


from aiogram import F, types

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import database

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram import Router
manager_router = Router()

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class ManagerStates(StatesGroup):
    Vacancy = State()
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    Q6 = State()
    Q7 = State()
    TestQ1 = State()
    TestQ2 = State()
    TestQ3 = State()
    TestQ4 = State()
    TestEnd = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


about_brand_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="job_conditions_man")]
    ]
)

job_conditions_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã", callback_data="job_conditions_2_man")]
    ]
)

job_conditions_2_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test_man")]
    ]
)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
correct_answers = {
    '1': '1',
    '2': '2',
    '3': '3',
    '4': '3'
}

# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –±—Ä–µ–Ω–¥–µ"
@manager_router.callback_query(F.data == "vacancy_manager")
async def about_brand(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "<b>–ú—ã –ú–∏—Å—Ç–µ–ª–ª–∞</b> ‚Äî –∫—Ä—É–ø–Ω–∞—è, —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ Wildberries, Ozon –ø–æ–¥ –±—Ä–µ–Ω–¥–æ–º <a href='https://www.wildberries.ru/catalog/0/search.aspx?search=missyourkiss'>–úissYourKiss</a>.\n\
    \n \
<b>–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å:</b>\n\
‚úì –ù–∞ —Ä—ã–Ω–∫–µ 5 –ª–µ—Ç, –∫–æ–º–∞–Ω–¥–∞ 50+ —á–µ–ª\n\
‚úì –í—ã—Ä—É—á–∫–∞ –æ—Ç 500 –º–ª–Ω —Ä—É–± / –≥–æ–¥, –±–æ–ª–µ–µ 1 –º–ª–Ω –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n\
‚úì –¢–û–ü-3 –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è –Ω–∞ WB –∏ Ozon\n\
‚úì –†–µ–∑–∏–¥–µ–Ω—Ç –°–∫–æ–ª–∫–æ–≤–æ\n\
‚úì –ù–∞—à –±—Ä–µ–Ω–¥ –º–Ω–æ–≥–∏–µ –∑–Ω–∞—é—Ç –∏ –ª—é–±—è—Ç",

        reply_markup=about_brand_keyboard
    )
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å–ª–æ–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"
@manager_router.callback_query(F.data == "job_conditions_man")
async def job_conditions(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üåê –ú—ã —Ä–∞–±–æ—Ç–∞–µ–º –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö Ozon –∏ WB, –≤–æ—Ç –ø—Ä–∏–º–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á, –∫–æ—Ç–æ—Ä—ã–µ –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å –ú–µ–Ω–µ–¥–∂–µ—Ä—É –ø–æ WB:\n\
    \n\
‚Äì –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–µ–π –æ—Ç–¥–µ–ª–∞ –ø—Ä–æ–¥–∞–∂ (–æ–±—ä–µ–º –∑–∞–∫–∞–∑–æ–≤, –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –∏ –î–†–†)\n\
‚Äì –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã–º –∫–∞–±–∏–Ω–µ—Ç–æ–º (–æ—Ç 50 –∫–∞–º–ø–∞–Ω–∏–π)\n\
‚Äì –£—á–∞—Å—Ç–∏–µ –≤ –∑–∞–ø—É—Å–∫–µ –Ω–æ–≤—ã—Ö SKU\n\
‚Äì –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≥–∏–ø–æ—Ç–µ–∑ –ø–æ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—é —Ü–µ–ª–µ–≤–æ–≥–æ —Ç—Ä–∞—Ñ–∏–∫–∞\n\
‚Äì –ì—Ä–∞–º–æ—Ç–Ω–∞—è –ø—Ä–æ—Ä–∞–±–æ—Ç–∫–∞ SEO –∏ –∞–Ω–∞–ª–∏–∑ –∫–æ–Ω–∫—É—Ä–µ–Ω—Ç–æ–≤",
        reply_markup=job_conditions_keyboard
    )
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã"
@manager_router.callback_query(F.data == "job_conditions_2_man")
async def job_conditions_2(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "üíº –ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n\
    \n\
‚Äî –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: –æ–∫–ª–∞–¥ 100.000 —Ä –Ω–∞ —Ä—É–∫–∏ + kpi (–¥–æ 100.000 —Ä)\n\
‚Äî –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: 5/2 —Å 09:00 –¥–æ 18:00 —É–¥–∞–ª–µ–Ω–Ω–æ\n\
‚Äî –°–≤–æ–±–æ–¥–∞ –¥–µ–π—Å—Ç–≤–∏–π: —Ç—ã —Å–∞–º –≤—ã–±–∏—Ä–∞–µ—à—å, –∫–∞–∫ –¥–æ—Å—Ç–∏–≥–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n\
‚Äî –ß–µ—Ç–∫–∞—è –∏ –ø—Ä–æ–∑—Ä–∞—á–Ω–∞—è –ø–æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–¥–∞—á –±–µ–∑ –æ—Ç–≤–ª–µ—á–µ–Ω–∏—è –æ—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤\n\
‚Äî –í–Ω–∏–º–∞—Ç–µ–ª—å–Ω–æ–µ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –∏ –∫–æ–ª–ª–µ–≥–∏: –º—ã –ø–æ–¥–¥–µ—Ä–∂–∏–º —Ç–≤–æ–∏ –∏–¥–µ–∏\n\
‚Äî –ö–∞—Ä—å–µ—Ä–Ω–æ–µ —Ä–∞–∑–≤–∏—Ç–∏–µ, –æ–±—É—á–∞—é—â–∏–µ –∫—É—Ä—Å—ã –∏ —Ç—Ä–µ–Ω–∏–Ω–≥–∏ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è –∫–≤–∞–ª–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞ —Å—á–µ—Ç –∫–æ–º–ø–∞–Ω–∏–∏\n\
‚Äî –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø–æ –¢–ö –†–§/ –°–ú–ó /–ò–ü",
        reply_markup=job_conditions_2_keyboard
    )
    await callback_query.answer()


@manager_router.callback_query(F.data == "start_test_man")
async def start_test(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if database.user_exists(user_id, 'manager'):
        await callback_query.message.answer(
            "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –°–ø–∞—Å–∏–±–æ!"
        )
    else:
        await callback_query.message.answer(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "*–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –ø—Ä—è–º–æ –≤ –±–æ—Ç–∞!*\n\n"
            "1. –¢–≤–æ—ë –∏–º—è?"
        )
        await state.update_data(vacancy="manager")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏
        await state.set_state(ManagerStates.Q1)
    await callback_query.answer()



# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ
@manager_router.message(ManagerStates.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer1 = message.text
    await state.update_data(name=answer1)
    await message.answer("2. –° –∫–∞–∫–∏–º–∏ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞–º–∏ —Ç—ã —Ä–∞–±–æ—Ç–∞–ª? –ö–∞–∫ –¥–∞–≤–Ω–æ?")
    await state.set_state(ManagerStates.Q2)


@manager_router.message(ManagerStates.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
    answer2 = message.text
    await state.update_data(marketplaces=answer2)
    await message.answer("3. –ö–∞–∫–æ–π —É —Ç–µ–±—è –±—ã–ª –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±—é–¥–∂–µ—Ç –≤ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –≤ –º–µ—Å—è—Ü?")
    await state.set_state(ManagerStates.Q3)


@manager_router.message(ManagerStates.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
    answer3 = message.text
    await state.update_data(budget=answer3)
    await message.answer("4. –ü–æ–¥–µ–ª–∏—Å—å, —Å –∫–∞–∫–∏–º–∏ –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –Ω–∏—à–∞–º–∏ —Ä–∞–±–æ—Ç–∞–ª")
    await state.set_state(ManagerStates.Q4)


@manager_router.message(ManagerStates.Q4)
async def answer_q4(message: types.Message, state: FSMContext):
    answer4 = message.text
    await state.update_data(companys=answer4)
    await message.answer("5. –ü–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è–º–∏ –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö! –ù–∞–ø–∏—à–∏ –æ—Ç–≤–µ—Ç –≤ —Å–≤–æ–±–æ–¥–Ω–æ–π —Ñ–æ—Ä–º–µ")
    await state.set_state(ManagerStates.Q5)


@manager_router.message(ManagerStates.Q5)
async def answer_q5(message: types.Message, state: FSMContext):
    answer5 = message.text
    await state.update_data(achievements=answer5)
    await message.answer("6. –° –∫–∞–∫–∏–º–∏ –æ–±–æ—Ä–æ—Ç–∞–º–∏ —Ä–∞–±–æ—Ç–∞–ª –≤ –º–µ—Å—è—Ü?")
    await state.set_state(ManagerStates.Q6)


@manager_router.message(ManagerStates.Q6)
async def answer_q5(message: types.Message, state: FSMContext):
    answer5 = message.text
    await state.update_data(company_turnover=answer5)
    await message.answer("7. –°–∫–æ–ª—å–∫–æ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö –∫–∞–º–ø–∞–Ω–∏–π –±—ã–ª–æ –ø–æ–¥ —Ç–≤–æ–∏–º —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º?")
    await state.set_state(ManagerStates.Q7)


@manager_router.message(ManagerStates.Q7)
async def answer_q6(message: types.Message, state: FSMContext):
    answer6 = message.text
    await state.update_data(ad_campaign=answer6)
    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã! –¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –ø–æ –±–∞–∑–æ–≤—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö! –û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å üîç"
    )
    await asyncio.sleep(2)
    # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    await send_test_question1(message, state)


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
# –í–æ–ø—Ä–æ—Å 1
async def send_test_question1(message: types.Message, state: FSMContext):
    question = "1. –ß—Ç–æ —Ç–∞–∫–æ–µ –±–∏–¥–¥–µ—Ä?\n\
1Ô∏è‚É£ –°–∏—Å—Ç–µ–º–∞ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å—Ç–∞–≤–æ–∫\n\
2Ô∏è‚É£ –ß–µ–ª–æ–≤–µ–∫, –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—é—â–∏–π —Ä–µ–∫–ª–∞–º—É\n\
3Ô∏è‚É£ –ú–µ—Ç—Ä–∏–∫–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω–µ–π —Ä–µ–∫–ª–∞–º—ã WB"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q1_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q1_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q1_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.answer(question, reply_markup=keyboard)
    await state.set_state(ManagerStates.TestQ1)


@manager_router.callback_query(ManagerStates.TestQ1)
async def answer_test_q1(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q1'] = user_choice
    await callback_query.answer()
    await send_test_question2(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 2
async def send_test_question2(message: types.Message, state: FSMContext):
    question = "2. –ö–∞–∫–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ —Ä–µ–∫–ª–∞–º—ã –≥–æ–≤–æ—Ä—è—Ç –æ –µ—ë —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏?\n\
1Ô∏è‚É£ CTR 6%, –î–†–† 23%, CPC 61‚ÇΩ\n\
2Ô∏è‚É£ CTR 13%, –î–†–† 3%, CPC 7‚ÇΩ\n\
3Ô∏è‚É£ CTR 16%, –î–†–† 10%, CPC 186‚ÇΩ"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q2_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q2_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q2_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options], )
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(ManagerStates.TestQ2)


@manager_router.callback_query(ManagerStates.TestQ2)
async def answer_test_q2(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q2'] = user_choice
    await callback_query.answer()
    await send_test_question3(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 3
async def send_test_question3(message: types.Message, state: FSMContext):
    question = "3. –ö–∞–∫–∏–µ —Ñ–∞–∫—Ç–æ—Ä—ã –≤–ª–∏—è—é—Ç –Ω–∞ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–µ–∫–ª–∞–º—ã?\n\
1Ô∏è‚É£ –ö–æ–Ω—Ç–µ–Ω—Ç, —Å—Ç–∞–≤–∫–∏\n\
2Ô∏è‚É£ –°—Ç–∞–≤–∫–∏, —Ü–µ–Ω–æ–≤–∞—è —Å–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è\n\
3Ô∏è‚É£ –û–±–∞ –≤–∞—Ä–∏–∞–Ω—Ç–∞"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q3_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q3_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q3_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(ManagerStates.TestQ3)


@manager_router.callback_query(ManagerStates.TestQ3)
async def answer_test_q4(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q3'] = user_choice
    await callback_query.answer()
    await send_test_question4(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 4
async def send_test_question4(message: types.Message, state: FSMContext):
    question = "4. –ö–∞–∫–∞—è –º–µ—Ç—Ä–∏–∫–∞ —Ä–µ–∫–ª–∞–º—ã –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –∑–∞–∫–∞–∑–∞?\n\
1Ô∏è‚É£ CTR\n\
2Ô∏è‚É£ CPC\n\
3Ô∏è‚É£ CPO\n\
4Ô∏è‚É£ ROI"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q4_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q4_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q4_3"),
        InlineKeyboardButton(text="4Ô∏è‚É£", callback_data="q4_4")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(ManagerStates.TestQ4)


@manager_router.callback_query(ManagerStates.TestQ4)
async def answer_test_q5(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q4'] = user_choice
    await callback_query.answer()
    await finish_test(callback_query.message, state)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def finish_test(message: types.Message, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    data['vacancy'] = data.get('vacancy', 'unknown')
    # –ü–æ–¥—Å—á–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
    score = 0
    for i in range(1, 5):
        if user_data.get(f'q{i}') == correct_answers[str(i)]:
            score += 1
    result_text = f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ 4 –±–∞–ª–ª–æ–≤.\n\n\
üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –±—Ä–µ–Ω–¥—É!\n\
–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n\
–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞—à–µ–º—É HR!\n\
\n\
–ö–æ–Ω—Ç–∞–∫—Ç: @polyyybbr"
    await message.edit_text(result_text)
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–ª–ª—ã –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ

    data['test_score'] = score
    data['user_id'] = message.chat.id
    data['username'] = message.chat.username
    data['first_name'] = message.chat.first_name
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    database.save_user_data(data)
    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.clear()
