import asyncio
from datetime import datetime

from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

from aiogram import F, types

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

import database

from aiogram.fsm.state import StatesGroup, State
from aiogram.fsm.context import FSMContext

from aiogram import Router
accountant_router = Router()


# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π
class AccountantStates(StatesGroup):
    Vacancy = State()
    Q1 = State()
    Q2 = State()
    Q3 = State()
    Q4 = State()
    Q5 = State()
    Q6 = State()
    Q7 = State()
    GET_CONTACT = State()
    TestQ1 = State()
    TestQ2 = State()
    TestQ3 = State()
    TestQ4 = State()
    TestEnd = State()


# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_data = {}


about_brand_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏", callback_data="job_conditions_acc")]
    ]
)

job_conditions_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã", callback_data="job_conditions_2_acc")]
    ]
)

job_conditions_2_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", callback_data="start_test_acc")]
    ]
)

# –û—Ç–≤–µ—Ç—ã –Ω–∞ —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
correct_answers = {
    '1': '3',
    '2': '1',
    '3': '3',
    '4': '2'
}


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–û –±—Ä–µ–Ω–¥–µ"
@accountant_router.callback_query(F.data == "vacancy_accountant")
async def about_brand(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "<b>–ú—ã –ú–∏—Å—Ç–µ–ª–ª–∞</b> ‚Äî –∫—Ä—É–ø–Ω–∞—è, —Ä–∞–∑–≤–∏–≤–∞—é—â–∞—è—Å—è –∫–æ–º–ø–∞–Ω–∏—è –ø–æ –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤—É –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è, –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–Ω–∞—è –Ω–∞ Wildberries, Ozon –ø–æ–¥ –±—Ä–µ–Ω–¥–æ–º <a href='https://www.wildberries.ru/catalog/0/search.aspx?search=missyourkiss'>–úissYourKiss</a>.\n\
    \n \
<b>–ù–µ–º–Ω–æ–≥–æ –æ –Ω–∞—Å:</b>\n\
‚úì –ù–∞ —Ä—ã–Ω–∫–µ 5 –ª–µ—Ç, –∫–æ–º–∞–Ω–¥–∞ 50+ —á–µ–ª\n\
‚úì –í—ã—Ä—É—á–∫–∞ –æ—Ç 500 –º–ª–Ω —Ä—É–± / –≥–æ–¥, –±–æ–ª–µ–µ 1 –º–ª–Ω –ø—Ä–æ–¥–∞–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤\n\
‚úì –¢–û–ü-3 –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–æ–º–ø–ª–µ–∫—Ç–æ–≤ –Ω–∏–∂–Ω–µ–≥–æ –±–µ–ª—å—è –Ω–∞ WB –∏ Ozon\n\
‚úì –†–µ–∑–∏–¥–µ–Ω—Ç –°–∫–æ–ª–∫–æ–≤–æ\n\
‚úì –ù–∞—à –±—Ä–µ–Ω–¥ –º–Ω–æ–≥–∏–µ –∑–Ω–∞—é—Ç –∏ –ª—é–±—è—Ç",

        reply_markup=about_brand_keyboard
    )
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å–ª–æ–≤–∏—è –≤–∞–∫–∞–Ω—Å–∏–∏"
@accountant_router.callback_query(F.data == "job_conditions_acc")
async def job_conditions(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–ú—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º:\n\
‚Ä¢ –ì—Ä–∞—Ñ–∏–∫ 5/2 —Å 9.00-18.00 –≤ –æ—Ñ–∏—Å–µ | –≥–∏–±—Ä–∏–¥\n\
‚Ä¢ –ó–ü –æ—Ç 100.000 —Ä –Ω–∞ —Ä—É–∫–∏ (–ø–æ –¥–æ–≥–æ–≤–æ—Ä—ë–Ω–Ω–æ—Å—Ç–∏)\n\
‚Ä¢ –ö–æ–º—Ñ–æ—Ä—Ç–∞–±–µ–ª—å–Ω—ã–π –æ—Ñ–∏—Å –Ω–∞ –°–∏–±–≥–∞—Ç–∞ –•–∞–∫–∏–º–∞, 3. –ì. –ö–∞–∑–∞–Ω—å, —Å –±–æ–ª—å—à–∏–º –ø–∞—Ä–∫–∏–Ω–≥–æ–º\n\
‚Ä¢ –í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ, –º–∞—Ç–µ—Ä–∏–∞–ª—å–Ω–æ –∏ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω–æ",
        reply_markup=job_conditions_keyboard
    )
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä –¥–ª—è –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£—Å–ª–æ–≤–∏—è —Ä–∞–±–æ—Ç—ã"
@accountant_router.callback_query(F.data == "job_conditions_2_acc")
async def job_conditions_2(callback_query: types.CallbackQuery):
    await callback_query.message.answer(
        "–ó–∞–¥–∞—á–∏: \n\
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –ø–µ—Ä–≤–∏—á–Ω–æ–π –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏, –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏\n\
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –∫–∞–º–µ—Ä–∞–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å–æ–≤–º–µ—Å—Ç–Ω–æ —Å —é—Ä–∏—Å—Ç–∞–º–∏\n\
‚Ä¢ –†–∞—Å—á–µ—Ç –ó–ü, –Ω–∞–ª–æ–≥–æ–≤, –≤–∑–Ω–æ—Å–æ–≤, –±–æ–ª—å–Ω–∏—á–Ω—ã—Ö, –∫–æ–º–ø–µ–Ω—Å–∞—Ü–∏–π\n\
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –±–∞–∑—ã 1–° –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –º–µ—Å—è—Ü–∞\n\
    \n\
–ù–∞–º –≤–∞–∂–Ω–æ:\n\
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ 1–° –£–ù–§, –ë–ü, –ó–£–ü\n\
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –û–°–ù–û\n\
‚Ä¢ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏\n\
‚Ä¢ –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —É—á–∞—Å—Ç–∫–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã",
        reply_markup=job_conditions_2_keyboard
    )
    await callback_query.answer()


@accountant_router.callback_query(F.data == "start_test_acc")
async def start_test(callback_query: types.CallbackQuery, state: FSMContext):
    user_id = callback_query.from_user.id
    if database.user_exists(user_id, 'accountant'):
        await callback_query.message.answer(
            "–í—ã —É–∂–µ –ø—Ä–æ—Ö–æ–¥–∏–ª–∏ —Ç–µ—Å—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ —Å–≤–æ–∏ –¥–∞–Ω–Ω—ã–µ. –°–ø–∞—Å–∏–±–æ!"
        )
    else:
        await callback_query.message.answer(
            "üìù –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–µ –≤–æ–ø—Ä–æ—Å—ã:\n\n"
            "*–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –æ—Ç–≤–µ—Ç—ã —Ç–µ–∫—Å—Ç–æ–º –ø—Ä—è–º–æ –≤ –±–æ—Ç–∞!*\n\n"
            "1. –í–∞—à–µ –∏–º—è?"
        )
        await state.update_data(vacancy="accountant")  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–∏–ø –≤–∞–∫–∞–Ω—Å–∏–∏
        await state.set_state(AccountantStates.Q1)
    await callback_query.answer()


# –•–µ–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ –æ —Å–µ–±–µ
@accountant_router.message(AccountantStates.Q1)
async def answer_q1(message: types.Message, state: FSMContext):
    answer1 = message.text
    await state.update_data(name=answer1)
    await message.answer("2. –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ 1–° –£–ù–§?")
    await state.set_state(AccountantStates.Q2)


@accountant_router.message(AccountantStates.Q2)
async def answer_q2(message: types.Message, state: FSMContext):
    answer2 = message.text
    await state.update_data(unf_1c=answer2)
    await message.answer("3. –†–∞–±–æ—Ç–∞–ª–∏ –ª–∏ –í—ã –≤ 1–° –ó–£–ü?")
    await state.set_state(AccountantStates.Q3)


@accountant_router.message(AccountantStates.Q3)
async def answer_q3(message: types.Message, state: FSMContext):
    answer3 = message.text
    await state.update_data(zup_1c=answer3)
    await message.answer("4. –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –≤ 1–° –ë–ü?")
    await state.set_state(AccountantStates.Q4)


@accountant_router.message(AccountantStates.Q4)
async def answer_q4(message: types.Message, state: FSMContext):
    answer4 = message.text
    await state.update_data(bp_1c=answer4)
    await message.answer("5. –ò–º–µ–µ—Ç—Å—è –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –Ω–∞ —É—á–∞—Å—Ç–∫–µ –∑–∞—Ä–∞–±–æ—Ç–Ω–æ–π –ø–ª–∞—Ç—ã? –°–∫–æ–ª—å–∫–æ —á–µ–ª–æ–≤–µ–∫ —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–ª–∏?")
    await state.set_state(AccountantStates.Q5)


@accountant_router.message(AccountantStates.Q5)
async def answer_q5(message: types.Message, state: FSMContext):
    answer5 = message.text
    await state.update_data(work_payments=answer5)
    await message.answer("6. –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –ø–æ –û–°–ù–û?")
    await state.set_state(AccountantStates.Q6)


@accountant_router.message(AccountantStates.Q6)
async def answer_q5(message: types.Message, state: FSMContext):
    answer5 = message.text
    await state.update_data(osno_exp=answer5)
    await message.answer("7. –ï—Å—Ç—å –ª–∏ —É –í–∞—Å –æ–ø—ã—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –Ω–∞–ª–æ–≥–æ–≤–æ–π –∏ –±—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–æ–π –æ—Ç—á—ë—Ç–Ω–æ—Å—Ç–∏?")
    await state.set_state(AccountantStates.Q7)


@accountant_router.message(AccountantStates.Q7)
async def answer_q7(message: types.Message, state: FSMContext):
    answer7 = message.text
    await state.update_data(buh_otchet=answer7)

    await message.answer(
        "–°–ø–∞—Å–∏–±–æ –∑–∞ –≤–∞—à–∏ –æ—Ç–≤–µ—Ç—ã!\n–¢–µ–ø–µ—Ä—å –ø—Ä–æ–π–¥–∏—Ç–µ –Ω–µ–±–æ–ª—å—à–æ–π —Ç–µ—Å—Ç –ø–æ –±–∞–∑–æ–≤—ã–º –∫–æ–º–ø–µ—Ç–µ–Ω—Ü–∏—è–º –¥–ª—è —Ä–∞–±–æ—Ç—ã.\n"
        "–û–Ω –ø–æ–º–æ–∂–µ—Ç –Ω–∞–º –ª—É—á—à–µ –ø–æ–Ω—è—Ç—å –≤–∞—à —É—Ä–æ–≤–µ–Ω—å üîç",
    )
    await asyncio.sleep(2)
    await send_test_question1(message, state)  # –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç


# –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ç–≤–µ—Ç–æ–≤
# –í–æ–ø—Ä–æ—Å 1
async def send_test_question1(message: types.Message, state: FSMContext):
    question = "1. –ü—Ä–µ–¥—Å—Ç–∞–≤–∏–º, —á—Ç–æ –í–∞—à –∫–æ–ª–ª–µ–≥–∞ —É—Ö–æ–¥–∏—Ç –≤ –æ—Ç–ø—É—Å–∫. –ö–æ–≥–¥–∞ –í—ã –¥–æ–ª–∂–Ω—ã –≤—ã–ø–ª–∞—Ç–∏—Ç—å –µ–º—É –æ—Ç–ø—É—Å–∫–Ω—ã–µ?\n\n\
1Ô∏è‚É£ –î–µ–Ω—å –≤ –¥–µ–Ω—å\n\
2Ô∏è‚É£ –ú–∏–Ω–∏–º—É–º –∑–∞ 1 –¥–µ–Ω—å –¥–æ –æ—Ç–ø—É—Å–∫–∞\n\
3Ô∏è‚É£ –ú–∏–Ω–∏–º—É–º –∑–∞ 3 –¥–Ω—è –¥–æ –æ—Ç–ø—É—Å–∫–∞"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q1_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q1_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q1_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.answer(question, reply_markup=keyboard)
    await state.set_state(AccountantStates.TestQ1)


@accountant_router.callback_query(AccountantStates.TestQ1)
async def answer_test_q1(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q1'] = user_choice
    await callback_query.answer()
    await send_test_question2(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 2
async def send_test_question2(message: types.Message, state: FSMContext):
    question = "2. –û–û–û ¬´–û–≥–æ–Ω—å¬ª –∏–∑ –ú–æ—Å–∫–≤—ã –ø—Ä–æ–¥–∞–ª–æ —Ç–æ–≤–∞—Ä—ã –û–û–û ¬´–õ–∞—Å—Ç–æ—á–∫–∞¬ª –∏–∑ –í–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫–∞. –ü–æ –¥–æ–≥–æ–≤–æ—Ä—É –ø—Ä–∞–≤–æ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –ø–æ–∫—É–ø–∞—Ç–µ–ª—é, –∫–æ–≥–¥–∞ —Ç–æ–≤–∞—Ä—ã –ø–æ—Å—Ç—É–ø–∞—é—Ç –Ω–∞ –µ–≥–æ —Å–∫–ª–∞–¥. –ö–∞–∫—É—é –¥–∞—Ç—É —Å—á–∏—Ç–∞—Ç—å –¥–Ω–µ–º –æ—Ç–≥—Ä—É–∑–∫–∏? –û–û–û ¬´–õ–∞—Å—Ç–æ—á–∫–∞¬ª –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ –£–°–ù –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ–¥ –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω–∏–µ –ø–æ –ù–î–°.\n\n\
1Ô∏è‚É£ –î–∞—Ç—É –∫–æ–≥–¥–∞ –û–û–û ¬´–û–≥–æ–Ω—å¬ª –æ—Ç–≥—Ä—É–∑–∏–ª —Ç–æ–≤–∞—Ä—ã –≤ –û–û–û ¬´–õ–∞—Å—Ç–æ—á–∫–∞¬ª\n\
2Ô∏è‚É£ –î–∞—Ç—É –∫–æ–≥–¥–∞ –û–û–û ¬´–õ–∞—Å—Ç–æ—á–∫–∞¬ª –ø—Ä–∏–Ω—è–ª —Ç–æ–≤–∞—Ä—ã —Å–µ–±–µ –Ω–∞ —Å–∫–ª–∞–¥\n\
3Ô∏è‚É£ –î–∞—Ç—É –∫–æ–≥–¥–∞ –û–û–û ¬´–õ–∞—Å—Ç–æ—á–∫–∞¬ª –æ–ø–ª–∞—Ç–∏–ª —Ç–æ–≤–∞—Ä—ã, –∫—É–ø–ª–µ–Ω–Ω—ã–µ —É –û–û–û ¬´–û–≥–æ–Ω—å¬ª"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q2_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q2_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q2_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options], )
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(AccountantStates.TestQ2)


@accountant_router.callback_query(AccountantStates.TestQ2)
async def answer_test_q2(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q2'] = user_choice
    await callback_query.answer()
    await send_test_question3(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 3
async def send_test_question3(message: types.Message, state: FSMContext):
    question = "3. –ß—Ç–æ–±—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º –¥–µ—Ç—Å–∫–∏–µ –≤—ã—á–µ—Ç—ã, –∫–∞–∫ —á–∞—Å—Ç–æ —Å –Ω–∏—Ö –Ω—É–∂–Ω–æ –±—Ä–∞—Ç—å —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è?\n\n\
1Ô∏è‚É£ –ï–∂–µ–≥–æ–¥–Ω–æ\n\
2Ô∏è‚É£ –û–¥–∏–Ω —Ä–∞–∑ –∑–∞ –≤—Å–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã\n\
3Ô∏è‚É£ –¢–∞–∫–∏–µ –∑–∞—è–≤–ª–µ–Ω–∏—è –Ω–µ –Ω—É–∂–Ω—ã"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q3_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q3_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q3_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(AccountantStates.TestQ3)


@accountant_router.callback_query(AccountantStates.TestQ3)
async def answer_test_q4(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q3'] = user_choice
    await callback_query.answer()
    await send_test_question4(callback_query.message, state)


# –í–æ–ø—Ä–æ—Å 4
async def send_test_question4(message: types.Message, state: FSMContext):
    question = "4. –ö–∞–∫ —á–∞—Å—Ç–æ –∫–æ–º–ø–∞–Ω–∏–∏ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–æ–¥–∏—Ç—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏–∑–∞—Ü–∏—é –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è–º –§–°–ë–£ 28?\n\n\
1Ô∏è‚É£ –û–¥–∏–Ω —Ä–∞–∑ –≤ —Ç—Ä–∏ –≥–æ–¥–∞\n\
2Ô∏è‚É£ –ù–µ —Ä–µ–∂–µ 1 —Ä–∞–∑–∞ –≤ –≥–æ–¥\n\
3Ô∏è‚É£ –ü–æ —Ä–∞—Å–ø–æ—Ä—è–∂–µ–Ω–∏—é —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª—è"
    options = [
        InlineKeyboardButton(text="1Ô∏è‚É£", callback_data="q4_1"),
        InlineKeyboardButton(text="2Ô∏è‚É£", callback_data="q4_2"),
        InlineKeyboardButton(text="3Ô∏è‚É£", callback_data="q4_3")
    ]
    keyboard = InlineKeyboardMarkup(inline_keyboard=[options])
    await message.edit_text(question, reply_markup=keyboard)
    await state.set_state(AccountantStates.TestQ4)


@accountant_router.callback_query(AccountantStates.TestQ4)
async def answer_test_q5(callback_query: types.CallbackQuery, state: FSMContext):
    user_choice = callback_query.data.split('_')[1]
    user_data['q4'] = user_choice
    await state.update_data(q4=user_choice)
    await callback_query.answer()
    await finish_test(callback_query.message, state)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏ –ø–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def finish_test(message: types.Message, state: FSMContext):
    data = await state.get_data()

    # –ü–æ–¥—Å—á–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    score = 0
    for i in range(1, 5):
        if user_data.get(f'q{i}') == correct_answers[str(i)]:
            score += 1

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –∑–∞–ø—Ä–æ—Å–∞ –∫–æ–Ω—Ç–∞–∫—Ç–∞
    contact_keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚úÖ", request_contact=True)]],
        resize_keyboard=True,
        one_time_keyboard=True
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
    result_text = (
        f"–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω! –í—ã –Ω–∞–±—Ä–∞–ª–∏ {score} –∏–∑ 4 –±–∞–ª–ª–æ–≤.\n\n"
        "üôè –°–ø–∞—Å–∏–±–æ –∑–∞ —Ç–≤–æ–µ –≤—Ä–µ–º—è –∏ –∏–Ω—Ç–µ—Ä–µ—Å –∫ –Ω–∞—à–µ–º—É –±—Ä–µ–Ω–¥—É!\n"
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –æ—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É \"–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º\" –∏ –º—ã —Å–≤—è–∂–µ–º—Å—è —Å —Ç–æ–±–æ–π –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.\n\n"
        "–ï—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å—Ç–µ—Å–Ω—è–π—Å—è –∏—Ö –∑–∞–¥–∞–≤–∞—Ç—å –Ω–∞—à–µ–º—É HR!\n\n"
        "–ö–æ–Ω—Ç–∞–∫—Ç: @polyyybbr"
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π
    await message.answer(
        result_text,
        reply_markup=contact_keyboard
    )

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –∫–æ–Ω—Ç–∞–∫—Ç–∞
    await state.set_state(AccountantStates.GET_CONTACT)
    await state.update_data(test_score=score)


@accountant_router.message(AccountantStates.GET_CONTACT, F.contact)
async def get_contact_after_test(message: types.Message, state: FSMContext):
    contact = message.contact
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
    database.save_user_data({
        **data,
        'phone_number': contact.phone_number,
        'telegram_user_id': contact.user_id,
        'first_name': contact.first_name,
        'last_name': contact.last_name,
        'chat_id': message.chat.id,
        'username': message.chat.username,
        'completed_at': datetime.now().isoformat()
    })

    await message.answer(
        "‚úÖ –°–ø–∞—Å–∏–±–æ! –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.\n"
        "–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è!",
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.clear()


@accountant_router.message(AccountantStates.GET_CONTACT)
async def contact_not_provided(message: types.Message):
    await message.answer(
        "‚ùå –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–æ—Ü–µ—Å—Å–∞",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –∫–æ–Ω—Ç–∞–∫—Ç–æ–º ‚úÖ", request_contact=True)]],
            resize_keyboard=True
        )
    )